------------------------------------------------------------------------
-- DO NOT EDIT
-- This file was automatically generated by the Impulse C Compiler.
-- 
-- Impulse C is Copyright 2002-2011, Impulse Accelerated Technologies, Inc.
-- 
-- Stage Master is Copyright 2002-2011, Green Mountain Computing Systems, Inc.
-- 
-- All rights reserved.
------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

library impulse;
use impulse.components.all;

library impulse;
use impulse.mem_if_components.all;

entity AES_arch is
  port (
    reset : in std_ulogic;
    sclk : in std_ulogic;
    clk : in std_ulogic;
    p_Producer_AESdataStream_en : in std_ulogic;
    p_Producer_AESdataStream_eos : in std_ulogic;
    p_Producer_AESdataStream_data : in std_ulogic_vector (7 downto 0);
    p_Producer_AESdataStream_rdy : out std_ulogic;
    p_Consumer_AESoutputStream_en : in std_ulogic;
    p_Consumer_AESoutputStream_data : out std_ulogic_vector (7 downto 0);
    p_Consumer_AESoutputStream_eos : out std_ulogic;
    p_Consumer_AESoutputStream_rdy : out std_ulogic;
    p_Producer_AESinputSignal_en : in std_ulogic;
    p_Producer_AESinputSignal_data : in std_ulogic_vector (31 downto 0));
end;

architecture structure of AES_arch is
  component AESproc is
    port (
    reset : in std_ulogic;
    sclk : in std_ulogic;
    clk : in std_ulogic;
    p_AESinputSignal_en : inout std_ulogic;
    p_AESinputSignal_rdy : in std_ulogic;
    p_AESinputSignal_data : in std_ulogic_vector (31 downto 0);
    p_AESdataStream_rdy : in std_ulogic;
    p_AESdataStream_en : inout std_ulogic;
    p_AESdataStream_eos : in std_ulogic;
    p_AESdataStream_data : in std_ulogic_vector (7 downto 0);
    p_AESoutputStream_rdy : in std_ulogic;
    p_AESoutputStream_en : inout std_ulogic;
    p_AESoutputStream_eos : out std_ulogic;
    p_AESoutputStream_data : out std_ulogic_vector (7 downto 0);
    p_SBox_din : in std_ulogic_vector (7 downto 0);
    p_SBox_raddr : out std_ulogic_vector (7 downto 0)
    );
  end component;

  component g_SBox is
    port (
    reset : in std_ulogic;
    sclk : in std_ulogic;
    clk : in std_ulogic;
    dout0 : out std_ulogic_vector (7 downto 0);
    raddr0 : in std_ulogic_vector (7 downto 0)
    );
  end component;

  signal p_AESproc_AESinputSignal_en : std_ulogic;
  signal p_AESproc_AESinputSignal_rdy : std_ulogic;
  signal p_AESproc_AESinputSignal_data : std_ulogic_vector (31 downto 0);
  signal p_AESproc_AESdataStream_rdy : std_ulogic;
  signal p_AESproc_AESdataStream_en : std_ulogic;
  signal p_AESproc_AESdataStream_eos : std_ulogic;
  signal p_AESproc_AESdataStream_data : std_ulogic_vector (7 downto 0);
  signal p_AESproc_AESoutputStream_rdy : std_ulogic;
  signal p_AESproc_AESoutputStream_en : std_ulogic;
  signal p_AESproc_AESoutputStream_eos : std_ulogic;
  signal p_AESproc_AESoutputStream_data : std_ulogic_vector (7 downto 0);
  signal p_AESproc_SBox_din : std_ulogic_vector (7 downto 0);
  signal p_AESproc_SBox_raddr : std_ulogic_vector (7 downto 0);
  signal local_reset : std_ulogic;
begin
  local_reset <= reset;

  AESproc0: AESproc
    port map (
      reset => local_reset,
      sclk => sclk,
      clk => clk,
      p_AESinputSignal_en => p_AESproc_AESinputSignal_en,
      p_AESinputSignal_rdy => p_AESproc_AESinputSignal_rdy,
      p_AESinputSignal_data => p_AESproc_AESinputSignal_data,
      p_AESdataStream_rdy => p_AESproc_AESdataStream_rdy,
      p_AESdataStream_en => p_AESproc_AESdataStream_en,
      p_AESdataStream_eos => p_AESproc_AESdataStream_eos,
      p_AESdataStream_data => p_AESproc_AESdataStream_data,
      p_AESoutputStream_rdy => p_AESproc_AESoutputStream_rdy,
      p_AESoutputStream_en => p_AESproc_AESoutputStream_en,
      p_AESoutputStream_eos => p_AESproc_AESoutputStream_eos,
      p_AESoutputStream_data => p_AESproc_AESoutputStream_data,
      p_SBox_din => p_AESproc_SBox_din,
      p_SBox_raddr => p_AESproc_SBox_raddr
    );

  SBox0: g_SBox
    port map (
      reset => local_reset,
      sclk => sclk,
      clk => clk,
      dout0 => p_AESproc_SBox_din,
      raddr0 => p_AESproc_SBox_raddr
    );

  inst0: stream_dc
    generic map (
      datawidth => 8,
      addrwidth => 8
    )
    port map (
      ireset => local_reset,
      iclk => sclk,
      input_en => p_Producer_AESdataStream_en,
      input_rdy => p_Producer_AESdataStream_rdy,
      input_eos => p_Producer_AESdataStream_eos,
      input_data => p_Producer_AESdataStream_data,
      oreset => local_reset,
      oclk => clk,
      output_en => p_AESproc_AESdataStream_en,
      output_rdy => p_AESproc_AESdataStream_rdy,
      output_eos => p_AESproc_AESdataStream_eos,
      output_data => p_AESproc_AESdataStream_data
    );

  inst1: stream_dc
    generic map (
      datawidth => 8,
      addrwidth => 8
    )
    port map (
      ireset => local_reset,
      iclk => clk,
      input_en => p_AESproc_AESoutputStream_en,
      input_rdy => p_AESproc_AESoutputStream_rdy,
      input_eos => p_AESproc_AESoutputStream_eos,
      input_data => p_AESproc_AESoutputStream_data,
      oreset => local_reset,
      oclk => sclk,
      output_en => p_Consumer_AESoutputStream_en,
      output_rdy => p_Consumer_AESoutputStream_rdy,
      output_eos => p_Consumer_AESoutputStream_eos,
      output_data => p_Consumer_AESoutputStream_data
    );

  inst2: csignal
    generic map (
      datawidth => 32
    )
    port map (
      reset => local_reset,
      clk => clk,
      input_en => p_Producer_AESinputSignal_en,
      input_data => p_Producer_AESinputSignal_data,
      output_en => p_AESproc_AESinputSignal_en,
      output_rdy => p_AESproc_AESinputSignal_rdy,
      output_data => p_AESproc_AESinputSignal_data
    );

end;
