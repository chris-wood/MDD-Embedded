-- ****************************************
-- DO NOT EDIT
-- This file was automatically generated by the Impulse C Compiler.
-- 
-- Impulse C is Copyright 2002-2009, Impulse Accelerated Technologies, Inc.
-- 
-- Stage Master is Copyright 2002-2009, Green Mountain Computing Systems, Inc.
-- 
-- All rights reserved.
-- 
-- ****************************************


-- TARGET: VHDL
    
library ieee;
use ieee.std_logic_1164.all;

package external_components is
end package;
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Sorter_samples_RAM is
  port (
    rst,clk : in std_ulogic;
    we : in std_ulogic;
    addr : in std_ulogic_vector(9 downto 0);
    din : in std_ulogic_vector(31 downto 0);
    dout : out std_ulogic_vector(31 downto 0)
  );
end Sorter_samples_RAM;

architecture behavior of Sorter_samples_RAM is
  type memtype is array (0 to 1023) of
    std_ulogic_vector(31 downto 0);
  signal mem : memtype;
  signal index: natural;
begin
  index <= to_integer(unsigned(addr));

  dout <= mem(index);

  write: process (clk)
  begin
    if (clk'event and clk='1') then
      if (we = '1') then
        mem(index) <= din;
      end if;
    end if;
  end process;
end behavior;

library ieee;
use ieee.std_logic_1164.all;

library impulse;
use impulse.components.all;
    
entity Sorter is
  port (signal reset : in std_ulogic;
    signal sclk : in std_ulogic;
    signal clk : in std_ulogic;
    signal p_input_rdy : in std_ulogic;
    signal p_input_en : inout std_ulogic;
    signal p_input_eos : in std_ulogic;
    signal p_input_data : in std_ulogic_vector (31 downto 0);
    signal p_output_rdy : in std_ulogic;
    signal p_output_en : inout std_ulogic;
    signal p_output_eos : out std_ulogic;
    signal p_output_data : out std_ulogic_vector (31 downto 0));
end Sorter;

use work.external_components.all;
architecture rtl of Sorter is
  function mkvec(b : in std_ulogic) return std_ulogic_vector is
    variable res : std_ulogic_vector(0 downto 0);
  begin
    res(0):=b;
    return(res);
  end;

  component Sorter_samples_RAM is
    port (signal rst : in std_ulogic;
      signal clk : in std_ulogic;
      signal we : in std_ulogic;
      signal addr : in std_ulogic_vector (9 downto 0);
      signal din : in std_ulogic_vector (31 downto 0);
      signal dout : out std_ulogic_vector (31 downto 0));
  end component;

  type stateType is (init, b0s0, b1s0, b2s0, b3s0, b3s1, b4s0, b5s0, b6s0, b6s1, b6s2, b6s3, b7s0, b7s1, b7s2, b7s3, b7s4, b8s0, b9s0, b10s0, b11s0, b11s1, b12s0, b13s0, finished);
  signal thisState : stateType;
  signal nextState : stateType;
  signal stateEn : std_ulogic;
  signal newState : std_ulogic;
  signal r_input : std_ulogic_vector (31 downto 0);
  signal r_nSample : std_ulogic_vector (31 downto 0);
  signal ni230_nSample : std_ulogic_vector (31 downto 0);
  signal ni236_nSample : std_ulogic_vector (31 downto 0);
  signal r_samples : std_ulogic_vector (31 downto 0);
  signal ni7_samples : std_ulogic_vector (31 downto 0);
  signal ni52_samples : std_ulogic_vector (31 downto 0);
  signal ni104_samples : std_ulogic_vector (31 downto 0);
  signal ni114_samples : std_ulogic_vector (31 downto 0);
  signal p_samples_addr : std_ulogic_vector (9 downto 0);
  signal p_samples_we : std_ulogic;
  signal p_samples_din : std_ulogic_vector (31 downto 0);
  signal p_samples_dout : std_ulogic_vector (31 downto 0);
  signal p_samples_re : std_ulogic;
  signal r_index : std_ulogic_vector (31 downto 0);
  signal ni225_index : std_ulogic_vector (31 downto 0);
  signal ni227_index : std_ulogic_vector (31 downto 0);
  signal ni228_index : std_ulogic_vector (31 downto 0);
  signal ni231_index : std_ulogic_vector (31 downto 0);
  signal ni238_index : std_ulogic_vector (31 downto 0);
  signal ni239_index : std_ulogic_vector (31 downto 0);
  signal ni242_index : std_ulogic_vector (31 downto 0);
  signal r_innerIndex : std_ulogic_vector (31 downto 0);
  signal ni233_innerIndex : std_ulogic_vector (31 downto 0);
  signal ni237_innerIndex : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp : std_ulogic_vector (31 downto 0);
  signal ni229_suif_tmp : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp0 : std_ulogic_vector (31 downto 0);
  signal ni232_suif_tmp0 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp1 : std_ulogic_vector (31 downto 0);
  signal ni234_suif_tmp1 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp2 : std_ulogic_vector (31 downto 0);
  signal ni235_suif_tmp2 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp3 : std_ulogic_vector (31 downto 0);
  signal ni240_suif_tmp3 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp4 : std_ulogic_vector (31 downto 0);
  signal ni241_suif_tmp4 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp5 : std_ulogic_vector (31 downto 0);
  signal ni226_suif_tmp5 : std_ulogic_vector (31 downto 0);
  signal r_r_e_g_0 : std_ulogic_vector (9 downto 0);
  signal ni88_r_e_g_0 : std_ulogic_vector (9 downto 0);
  signal ni100_r_e_g_0 : std_ulogic_vector (9 downto 0);
  signal ni107_r_e_g_0 : std_ulogic_vector (9 downto 0);
  signal r_r_e_g_1 : std_ulogic_vector (31 downto 0);
  signal ni86_r_e_g_1 : std_ulogic_vector (31 downto 0);
  signal ti155_samples : std_ulogic_vector (9 downto 0);
  signal t_2 : std_ulogic_vector (9 downto 0);
  signal ti110_samples : std_ulogic_vector (9 downto 0);
  signal ti92_samples : std_ulogic_vector (9 downto 0);
  signal t_1 : std_ulogic_vector (9 downto 0);
  signal t_0 : std_ulogic_vector (9 downto 0);
  signal s_b3s0_en : std_ulogic;
  signal s_b4s0_en : std_ulogic;
  signal s_b11s1_en : std_ulogic;
  signal s_b12s0_en : std_ulogic;
begin
  process (clk,reset)
  begin
    if (reset='1') then
     thisState <= init;
    elsif (clk'event and clk='1') then
      if (stateEn = '1') then
        thisState <= nextState;
      end if;
    end if;
  end process;

  s_b3s0_en <= p_input_rdy;
  s_b4s0_en <= p_input_eos;
  s_b11s1_en <= p_output_rdy;
  s_b12s0_en <= p_output_rdy;
  stateEn <= 
    '0' when thisState = b3s0 and s_b3s0_en = '0' else
    '0' when thisState = b4s0 and s_b4s0_en = '0' else
    '0' when thisState = b11s1 and s_b11s1_en = '0' else
    '0' when thisState = b12s0 and s_b12s0_en = '0' else
    '1';

  process (r_suif_tmp3,ni232_suif_tmp0,ni234_suif_tmp1,ni235_suif_tmp2,ni229_suif_tmp,ni226_suif_tmp5,thisState)
  begin
    case thisState is
    when init =>
      nextState <= b0s0;
    when b0s0 =>
      nextState <= b1s0;
    when b1s0 =>
      if (ni226_suif_tmp5(0) = '1') then
        nextState <= b1s0;
      elsif ((not ni226_suif_tmp5(0)) = '1') then
        nextState <= b2s0;
      else
        nextState <= b1s0;
      end if;
    when b2s0 =>
      nextState <= b3s0;
    when b3s0 =>
      if ((not ni229_suif_tmp(0)) = '1') then
        nextState <= b4s0;
      else
        nextState <= b3s1;
      end if;
    when b3s1 =>
      nextState <= b3s0;
    when b4s0 =>
      nextState <= b5s0;
    when b5s0 =>
      nextState <= b6s0;
    when b6s0 =>
      nextState <= b6s1;
    when b6s1 =>
      nextState <= b6s2;
    when b6s2 =>
      nextState <= b6s3;
    when b6s3 =>
      if (ni235_suif_tmp2(0) = '1') then
        nextState <= b7s0;
      elsif ((not ni235_suif_tmp2(0)) = '1') then
        nextState <= b8s0;
      else
        nextState <= b6s3;
      end if;
    when b7s0 =>
      nextState <= b7s1;
    when b7s1 =>
      nextState <= b7s2;
    when b7s2 =>
      nextState <= b7s3;
    when b7s3 =>
      nextState <= b7s4;
    when b7s4 =>
      nextState <= b8s0;
    when b8s0 =>
      if (ni234_suif_tmp1(0) = '1') then
        nextState <= b6s0;
      elsif ((not ni234_suif_tmp1(0)) = '1') then
        nextState <= b9s0;
      else
        nextState <= b8s0;
      end if;
    when b9s0 =>
      if (ni232_suif_tmp0(0) = '1') then
        nextState <= b5s0;
      elsif ((not ni232_suif_tmp0(0)) = '1') then
        nextState <= b10s0;
      else
        nextState <= b9s0;
      end if;
    when b10s0 =>
      nextState <= b11s0;
    when b11s0 =>
      nextState <= b11s1;
    when b11s1 =>
      if (r_suif_tmp3(0) = '1') then
        nextState <= b11s0;
      elsif ((not r_suif_tmp3(0)) = '1') then
        nextState <= b12s0;
      else
        nextState <= b11s1;
      end if;
    when b12s0 =>
      nextState <= b2s0;
    when b13s0 =>
      nextState <= finished;
    when finished =>
      nextState <= finished;
    when others =>
      nextState <= init;
    end case;
  end process;

  process (clk,reset)
  begin
    if (reset='1') then
     newState <= '1';
    elsif (clk'event and clk='1') then
      newState <= stateEn;
    end if;
  end process;

-- b0s0
  ni225_index <= X"00000000";

-- b1s0
  ni7_samples <= X"00000000";
  t_0 <= r_index(9 downto 0);
  ni227_index <= add(r_index, X"00000001");
  ni226_suif_tmp5 <= "0000000000000000000000000000000" & cmp_less_s(ni227_index, X"00000400");

-- b2s0
  ni228_index <= X"00000000";

-- b3s0
  ni229_suif_tmp <= "0000000000000000000000000000000" & eq("0" & mkvec(p_input_eos), "00");

-- b3s1
  ni230_nSample <= r_input;
  ni52_samples <= ni230_nSample;
  t_1 <= "0000000000";

-- b4s0
  ni231_index <= X"00000000";

-- b5s0
  ni233_innerIndex <= X"00000000";

-- b6s0
  ni88_r_e_g_0 <= add(r_innerIndex(9 downto 0), "0000000001");

-- b6s1

-- b6s2
  ti92_samples <= r_innerIndex(9 downto 0);

-- b6s3
  ni235_suif_tmp2 <= "0000000000000000000000000000000" & cmp_less_s(r_r_e_g_1, r_samples);

-- b7s0
  ni100_r_e_g_0 <= add(r_innerIndex(9 downto 0), "0000000001");

-- b7s1

-- b7s2
  ni236_nSample <= r_samples;
  ti110_samples <= r_innerIndex(9 downto 0);
  ni107_r_e_g_0 <= add(r_innerIndex(9 downto 0), "0000000001");

-- b7s3
  ni104_samples <= r_samples;

-- b7s4
  ni114_samples <= r_nSample;
  t_2 <= r_innerIndex(9 downto 0);

-- b8s0
  ni237_innerIndex <= add(r_innerIndex, X"00000001");
  ni234_suif_tmp1 <= "0000000000000000000000000000000" & cmp_less_s(ni237_innerIndex, X"000003ff");

-- b9s0
  ni238_index <= add(r_index, X"00000001");
  ni232_suif_tmp0 <= "0000000000000000000000000000000" & cmp_less_s(ni238_index, X"00000400");

-- b10s0
  ni239_index <= X"00000000";

-- b11s0
  ti155_samples <= r_index(9 downto 0);
  ni242_index <= add(r_index, X"00000001");
  ni240_suif_tmp3 <= "0000000000000000000000000000000" & cmp_less_s(ni242_index, X"00000400");

-- b11s1
  ni241_suif_tmp4 <= r_samples;

-- b12s0

-- b13s0

-- 


  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b0s0 =>
        if (stateEn = '1') then
          r_index <= ni225_index;
        end if;
      when b1s0 =>
        if (stateEn = '1') then
          r_index <= ni227_index;
        end if;
      when b2s0 =>
        if (stateEn = '1') then
          r_index <= ni228_index;
        end if;
      when b4s0 =>
        if (stateEn = '1') then
          r_index <= ni231_index;
        end if;
      when b9s0 =>
        if (stateEn = '1') then
          r_index <= ni238_index;
        end if;
      when b10s0 =>
        if (stateEn = '1') then
          r_index <= ni239_index;
        end if;
      when b11s0 =>
        if (stateEn = '1') then
          r_index <= ni242_index;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b1s0 =>
        if (stateEn = '1') then
          r_suif_tmp5 <= ni226_suif_tmp5;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b3s0 =>
        if (stateEn = '1') then
          r_suif_tmp <= ni229_suif_tmp;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b3s1 =>
        if (stateEn = '1') then
          r_nSample <= ni230_nSample;
        end if;
      when b7s2 =>
        if (stateEn = '1') then
          r_nSample <= ni236_nSample;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b5s0 =>
        if (stateEn = '1') then
          r_innerIndex <= ni233_innerIndex;
        end if;
      when b8s0 =>
        if (stateEn = '1') then
          r_innerIndex <= ni237_innerIndex;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b6s0 =>
        if (stateEn = '1') then
          r_r_e_g_0 <= ni88_r_e_g_0;
        end if;
      when b7s0 =>
        if (stateEn = '1') then
          r_r_e_g_0 <= ni100_r_e_g_0;
        end if;
      when b7s2 =>
        if (stateEn = '1') then
          r_r_e_g_0 <= ni107_r_e_g_0;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b6s2 =>
        if (stateEn = '1') then
          r_r_e_g_1 <= r_samples;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b6s3 =>
        if (stateEn = '1') then
          r_suif_tmp2 <= ni235_suif_tmp2;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b8s0 =>
        if (stateEn = '1') then
          r_suif_tmp1 <= ni234_suif_tmp1;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b9s0 =>
        if (stateEn = '1') then
          r_suif_tmp0 <= ni232_suif_tmp0;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b11s0 =>
        if (stateEn = '1') then
          r_suif_tmp3 <= ni240_suif_tmp3;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b11s1 =>
        if (stateEn = '1') then
          r_suif_tmp4 <= ni241_suif_tmp4;
        end if;
      when others =>
      end case;
    end if;
  end process;

-- "input" interface signals
  process (clk)
  begin
    if (clk'event and clk='1') then
      if ((p_input_en and p_input_rdy) = '1') then
        r_input <= p_input_data;
      end if;
    end if;
  end process;

  p_input_en <= 
    s_b3s0_en and not p_input_eos when thisState = b3s0 else
    s_b4s0_en or not p_input_eos when thisState = b4s0 else
    '0';

-- "output" interface signals
  p_output_en <= 
    s_b11s1_en when thisState = b11s1 else
    s_b12s0_en when thisState = b12s0 else
    '0';
  p_output_data <= ni241_suif_tmp4;
  p_output_eos <= 
    '1' when thisState = b12s0 else
    '0';

-- "samples" memory signals
  ram_0: Sorter_samples_RAM
    port map (
      rst => reset, 
      clk => clk, 
      we => p_samples_we, 
      addr => p_samples_addr, 
      din => p_samples_din, 
      dout => p_samples_dout);

  p_samples_addr <= 
    r_index(9 downto 0) when thisState = b1s0 else
    "0000000000" when thisState = b3s1 else
    r_r_e_g_0 when thisState = b6s1 else
    r_innerIndex(9 downto 0) when thisState = b6s2 else
    r_r_e_g_0 when thisState = b7s1 else
    r_innerIndex(9 downto 0) when thisState = b7s2 else
    r_r_e_g_0 when thisState = b7s3 else
    r_innerIndex(9 downto 0) when thisState = b7s4 else
    r_index(9 downto 0) when thisState = b11s0 else
    (others => 'X');
  p_samples_re <= 
    '1' when thisState = b6s1 else
    '1' when thisState = b6s2 else
    '1' when thisState = b7s1 else
    '1' when thisState = b7s2 else
    '1' when thisState = b11s0 else
    '0';
  p_samples_we <= 
    '1' when thisState = b1s0 else
    '1' when thisState = b3s1 else
    '1' when thisState = b7s3 else
    '1' when thisState = b7s4 else
    '0';
  p_samples_din <= 
    ni7_samples when thisState = b1s0 else
    ni230_nSample when thisState = b3s1 else
    r_samples when thisState = b7s3 else
    r_nSample when thisState = b7s4 else
    (others => 'X');
  process (clk)
  begin
    if (clk'event and clk='1') then
      if (p_samples_re = '1') then
        r_samples <= p_samples_dout;
      end if;
    end if;
  end process;

end rtl;
