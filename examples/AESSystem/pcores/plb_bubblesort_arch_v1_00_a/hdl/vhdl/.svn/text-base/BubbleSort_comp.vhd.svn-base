-- ****************************************
-- DO NOT EDIT
-- This file was automatically generated by the Impulse C Compiler.
-- 
-- Impulse C is Copyright 2002-2009, Impulse Accelerated Technologies, Inc.
-- 
-- Stage Master is Copyright 2002-2009, Green Mountain Computing Systems, Inc.
-- 
-- All rights reserved.
-- 
-- ****************************************


-- TARGET: VHDL
    
library ieee;
use ieee.std_logic_1164.all;

package external_components is
end package;
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;

entity Sorter_samples_RAM is
  port (
    rst,clk : in std_ulogic;
    we : in std_ulogic;
    addr : in std_ulogic_vector(4 downto 0);
    addr2 : in std_ulogic_vector(4 downto 0);
    din : in std_ulogic_vector(31 downto 0);
    dout : out std_ulogic_vector(31 downto 0);
    dout2 : out std_ulogic_vector(31 downto 0)
  );
end Sorter_samples_RAM;

architecture dualsync of Sorter_samples_RAM is
  type memtype is array (0 to 31) of
    std_ulogic_vector(31 downto 0);
  signal mem : memtype;
  signal raddr: unsigned(4 downto 0);
  signal raddr2: unsigned(4 downto 0);
begin
  writemem: process (clk)
  begin
    if (clk'event and clk='1') then
      if (we = '1') then
        mem(conv_integer(unsigned(addr))) <= din;
      end if;
      raddr <= unsigned(addr);
      raddr2 <= unsigned(addr2);
    end if;
  end process;

  dout <= mem(conv_integer(raddr));
  dout2 <= mem(conv_integer(raddr2));
end dualsync;

library ieee;
use ieee.std_logic_1164.all;

library impulse;
use impulse.components.all;
    
entity Sorter is
  port (signal reset : in std_ulogic;
    signal sclk : in std_ulogic;
    signal clk : in std_ulogic;
    signal p_input_rdy : in std_ulogic;
    signal p_input_en : inout std_ulogic;
    signal p_input_eos : in std_ulogic;
    signal p_input_data : in std_ulogic_vector (31 downto 0);
    signal p_output_rdy : in std_ulogic;
    signal p_output_en : inout std_ulogic;
    signal p_output_eos : out std_ulogic;
    signal p_output_data : out std_ulogic_vector (31 downto 0));
end Sorter;

use work.external_components.all;
architecture rtl of Sorter is
  function mkvec(b : in std_ulogic) return std_ulogic_vector is
    variable res : std_ulogic_vector(0 downto 0);
  begin
    res(0):=b;
    return(res);
  end;

  component Sorter_samples_RAM is
    port (signal rst : in std_ulogic;
      signal clk : in std_ulogic;
      signal we : in std_ulogic;
      signal addr : in std_ulogic_vector (4 downto 0);
      signal addr2 : in std_ulogic_vector (4 downto 0);
      signal din : in std_ulogic_vector (31 downto 0);
      signal dout : out std_ulogic_vector (31 downto 0);
      signal dout2 : out std_ulogic_vector (31 downto 0));
  end component;

  type stateType is (init, b0s0, b1s0, b2s0, b3s0, b3s1, b3s2, b4s0, b5s0, b6s0, b7s0, b8s0, b8s1, b9s0, b9s1, b9s2, b10s0, b10s1, b11s0, b11s1, b11s2, b12s0, b13s0, b14s0, b15s0, b16s0, b16s1, b17s0, b18s0, finished);
  signal thisState : stateType;
  signal nextState : stateType;
  signal stateEn : std_ulogic;
  signal newState : std_ulogic;
  signal r_input : std_ulogic_vector (31 downto 0);
  signal r_nSample : std_ulogic_vector (31 downto 0);
  signal ni298_nSample : std_ulogic_vector (31 downto 0);
  signal ni306_nSample : std_ulogic_vector (31 downto 0);
  signal ni318_nSample : std_ulogic_vector (31 downto 0);
  signal ni320_nSample : std_ulogic_vector (31 downto 0);
  signal r_samples : std_ulogic_vector (31 downto 0);
  signal ni13_samples : std_ulogic_vector (31 downto 0);
  signal ni62_samples : std_ulogic_vector (31 downto 0);
  signal ni113_samples : std_ulogic_vector (31 downto 0);
  signal ni119_samples : std_ulogic_vector (31 downto 0);
  signal ni125_samples : std_ulogic_vector (31 downto 0);
  signal ni131_samples : std_ulogic_vector (31 downto 0);
  signal ni137_samples : std_ulogic_vector (31 downto 0);
  signal ni141_samples : std_ulogic_vector (31 downto 0);
  signal ni151_samples : std_ulogic_vector (31 downto 0);
  signal ni155_samples : std_ulogic_vector (31 downto 0);
  signal ni163_samples : std_ulogic_vector (31 downto 0);
  signal ni169_samples : std_ulogic_vector (31 downto 0);
  signal ni175_samples : std_ulogic_vector (31 downto 0);
  signal ni179_samples : std_ulogic_vector (31 downto 0);
  signal ni227_samples : std_ulogic_vector (31 downto 0);
  signal p_samples_addr : std_ulogic_vector (4 downto 0);
  signal p_samples_addr2 : std_ulogic_vector (4 downto 0);
  signal p_samples_we : std_ulogic;
  signal p_samples_din : std_ulogic_vector (31 downto 0);
  signal p_samples_dout : std_ulogic_vector (31 downto 0);
  signal p_samples_imm : std_ulogic_vector (31 downto 0);
  signal p_samples_re : std_ulogic;
  signal r2_samples : std_ulogic_vector (31 downto 0);
  signal p_samples_dout2 : std_ulogic_vector (31 downto 0);
  signal p_samples_imm2 : std_ulogic_vector (31 downto 0);
  signal p_samples_re2 : std_ulogic;
  signal r_index : std_ulogic_vector (31 downto 0);
  signal ni301_index : std_ulogic_vector (31 downto 0);
  signal ni303_index : std_ulogic_vector (31 downto 0);
  signal ni304_index : std_ulogic_vector (31 downto 0);
  signal ni308_index : std_ulogic_vector (31 downto 0);
  signal ni312_index : std_ulogic_vector (31 downto 0);
  signal ni322_index : std_ulogic_vector (31 downto 0);
  signal ni326_index : std_ulogic_vector (31 downto 0);
  signal ni329_index : std_ulogic_vector (31 downto 0);
  signal r_innerIndex : std_ulogic_vector (31 downto 0);
  signal ni315_innerIndex : std_ulogic_vector (31 downto 0);
  signal ni321_innerIndex : std_ulogic_vector (31 downto 0);
  signal r_NUM_LOOPS : std_ulogic_vector (31 downto 0);
  signal ni299_NUM_LOOPS : std_ulogic_vector (31 downto 0);
  signal r_counter : std_ulogic_vector (31 downto 0);
  signal ni300_counter : std_ulogic_vector (31 downto 0);
  signal ni309_counter : std_ulogic_vector (31 downto 0);
  signal ni324_counter : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp : std_ulogic_vector (31 downto 0);
  signal ni305_suif_tmp : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp0 : std_ulogic_vector (31 downto 0);
  signal ni325_suif_tmp0 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp1 : std_ulogic_vector (31 downto 0);
  signal ni313_suif_tmp1 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp2 : std_ulogic_vector (31 downto 0);
  signal ni323_suif_tmp2 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp3 : std_ulogic_vector (31 downto 0);
  signal ni316_suif_tmp3 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp4 : std_ulogic_vector (31 downto 0);
  signal ni317_suif_tmp4 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp5 : std_ulogic_vector (31 downto 0);
  signal ni319_suif_tmp5 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp6 : std_ulogic_vector (31 downto 0);
  signal ni327_suif_tmp6 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp7 : std_ulogic_vector (31 downto 0);
  signal ni328_suif_tmp7 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp00 : std_ulogic_vector (31 downto 0);
  signal ni307_suif_tmp00 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp_0 : std_ulogic_vector (31 downto 0);
  signal ni314_suif_tmp_0 : std_ulogic_vector (31 downto 0);
  signal r_suif_tmp8 : std_ulogic_vector (31 downto 0);
  signal ni302_suif_tmp8 : std_ulogic_vector (31 downto 0);
  signal r_r_e_g_0 : std_ulogic_vector (4 downto 0);
  signal ni115_r_e_g_0 : std_ulogic_vector (4 downto 0);
  signal ni127_r_e_g_0 : std_ulogic_vector (4 downto 0);
  signal ni157_r_e_g_0 : std_ulogic_vector (4 downto 0);
  signal ni165_r_e_g_0 : std_ulogic_vector (4 downto 0);
  signal r_r_e_g_1 : std_ulogic_vector (4 downto 0);
  signal ni134_r_e_g_1 : std_ulogic_vector (4 downto 0);
  signal ni172_r_e_g_1 : std_ulogic_vector (4 downto 0);
  signal ti227_samples : std_ulogic_vector (4 downto 0);
  signal t_3 : std_ulogic_vector (4 downto 0);
  signal ti175_samples : std_ulogic_vector (4 downto 0);
  signal ti151_samples : std_ulogic_vector (4 downto 0);
  signal t_2 : std_ulogic_vector (4 downto 0);
  signal ti137_samples : std_ulogic_vector (4 downto 0);
  signal ti119_samples : std_ulogic_vector (4 downto 0);
  signal t_1 : std_ulogic_vector (4 downto 0);
  signal t_0 : std_ulogic_vector (4 downto 0);
  signal s_b3s0_en : std_ulogic;
  signal s_b4s0_en : std_ulogic;
  signal s_b16s1_en : std_ulogic;
  signal s_b17s0_en : std_ulogic;
begin
  process (clk,reset)
  begin
    if (reset='1') then
     thisState <= init;
    elsif (clk'event and clk='1') then
      if (stateEn = '1') then
        thisState <= nextState;
      end if;
    end if;
  end process;

  s_b3s0_en <= p_input_rdy;
  s_b4s0_en <= p_input_eos;
  s_b16s1_en <= p_output_rdy;
  s_b17s0_en <= p_output_rdy;
  stateEn <= 
    '0' when thisState = b3s0 and s_b3s0_en = '0' else
    '0' when thisState = b4s0 and s_b4s0_en = '0' else
    '0' when thisState = b16s1 and s_b16s1_en = '0' else
    '0' when thisState = b17s0 and s_b17s0_en = '0' else
    '1';

  process (ni327_suif_tmp6,ni325_suif_tmp0,ni323_suif_tmp2,ni316_suif_tmp3,ni319_suif_tmp5,ni317_suif_tmp4,r_suif_tmp_0,ni313_suif_tmp1,ni305_suif_tmp,ni302_suif_tmp8,thisState)
  begin
    case thisState is
    when init =>
      nextState <= b0s0;
    when b0s0 =>
      nextState <= b1s0;
    when b1s0 =>
      if (ni302_suif_tmp8(0) = '1') then
        nextState <= b1s0;
      elsif ((not ni302_suif_tmp8(0)) = '1') then
        nextState <= b2s0;
      else
        nextState <= b1s0;
      end if;
    when b2s0 =>
      nextState <= b3s0;
    when b3s0 =>
      if ((not ni305_suif_tmp(0)) = '1') then
        nextState <= b4s0;
      else
        nextState <= b3s1;
      end if;
    when b3s1 =>
      nextState <= b3s2;
    when b3s2 =>
      nextState <= b3s0;
    when b4s0 =>
      nextState <= b5s0;
    when b5s0 =>
      if (ni313_suif_tmp1(0) = '1') then
        nextState <= b6s0;
      elsif ((not ni313_suif_tmp1(0)) = '1') then
        nextState <= b14s0;
      else
        nextState <= b5s0;
      end if;
    when b6s0 =>
      nextState <= b7s0;
    when b7s0 =>
      if (r_suif_tmp_0(0) = '1') then
        nextState <= b8s0;
      elsif ((not r_suif_tmp_0(0)) = '1') then
        nextState <= b10s0;
      else
        nextState <= b7s0;
      end if;
    when b8s0 =>
      nextState <= b8s1;
    when b8s1 =>
      if (ni317_suif_tmp4(0) = '1') then
        nextState <= b9s0;
      elsif ((not ni317_suif_tmp4(0)) = '1') then
        nextState <= b12s0;
      else
        nextState <= b8s1;
      end if;
    when b9s0 =>
      nextState <= b9s1;
    when b9s1 =>
      nextState <= b9s2;
    when b9s2 =>
      nextState <= b12s0;
    when b10s0 =>
      nextState <= b10s1;
    when b10s1 =>
      if (ni319_suif_tmp5(0) = '1') then
        nextState <= b11s0;
      elsif ((not ni319_suif_tmp5(0)) = '1') then
        nextState <= b12s0;
      else
        nextState <= b10s1;
      end if;
    when b11s0 =>
      nextState <= b11s1;
    when b11s1 =>
      nextState <= b11s2;
    when b11s2 =>
      nextState <= b12s0;
    when b12s0 =>
      if ((r_suif_tmp_0(0) and ni316_suif_tmp3(0)) = '1') then
        nextState <= b8s0;
      elsif ((not r_suif_tmp_0(0) and ni316_suif_tmp3(0)) = '1') then
        nextState <= b10s0;
      elsif ((not ni316_suif_tmp3(0)) = '1') then
        nextState <= b13s0;
      else
        nextState <= b12s0;
      end if;
    when b13s0 =>
      if (ni323_suif_tmp2(0) = '1') then
        nextState <= b7s0;
      elsif ((not ni323_suif_tmp2(0)) = '1') then
        nextState <= b14s0;
      else
        nextState <= b13s0;
      end if;
    when b14s0 =>
      if (ni325_suif_tmp0(0) = '1') then
        nextState <= b5s0;
      elsif ((not ni325_suif_tmp0(0)) = '1') then
        nextState <= b15s0;
      else
        nextState <= b14s0;
      end if;
    when b15s0 =>
      nextState <= b16s0;
    when b16s0 =>
      nextState <= b16s1;
    when b16s1 =>
      if (ni327_suif_tmp6(0) = '1') then
        nextState <= b16s0;
      elsif ((not ni327_suif_tmp6(0)) = '1') then
        nextState <= b17s0;
      else
        nextState <= b16s1;
      end if;
    when b17s0 =>
      nextState <= b2s0;
    when b18s0 =>
      nextState <= finished;
    when finished =>
      nextState <= finished;
    when others =>
      nextState <= init;
    end case;
  end process;

  process (clk,reset)
  begin
    if (reset='1') then
     newState <= '1';
    elsif (clk'event and clk='1') then
      newState <= stateEn;
    end if;
  end process;

-- b0s0
  ni298_nSample <= X"00000000";
  ni299_NUM_LOOPS <= X"000f4240";
  ni300_counter <= X"00000000";
  ni301_index <= X"00000000";

-- b1s0
  ni13_samples <= X"00000000";
  t_0 <= r_index(4 downto 0);
  ni303_index <= add(r_index, X"00000001");
  ni302_suif_tmp8 <= "0000000000000000000000000000000" & cmp_less_s(ni303_index, X"00000020");

-- b2s0
  ni304_index <= X"00000000";

-- b3s0
  ni305_suif_tmp <= "0000000000000000000000000000000" & eq("0" & mkvec(p_input_eos), "00");

-- b3s1
  ni306_nSample <= r_input;
  ni307_suif_tmp00 <= r_index;
  ni308_index <= add(ni307_suif_tmp00, X"00000001");

-- b3s2
  ni62_samples <= r_nSample;
  t_1 <= r_suif_tmp00(4 downto 0);

-- b4s0
  ni309_counter <= X"00000000";

-- b5s0
  ni312_index <= X"00000000";
  ni313_suif_tmp1 <= "0000000000000000000000000000000" & cmp_less_s(ni312_index, X"00000020");

-- b6s0
  ni314_suif_tmp_0 <= "0000000000000000000000000000000" & eq(r_counter and X"00000001", X"00000000");

-- b7s0
  ni315_innerIndex <= X"00000000";

-- b8s0
  ni115_r_e_g_0 <= add(r_innerIndex(4 downto 0), "00001");

-- b8s1
  ni113_samples <= p_samples_imm2;
  ti119_samples <= r_innerIndex(4 downto 0);
  ni119_samples <= p_samples_imm;
  ni317_suif_tmp4 <= "0000000000000000000000000000000" & cmp_less_s(ni113_samples, ni119_samples);

-- b9s0
  ni127_r_e_g_0 <= add(r_innerIndex(4 downto 0), "00001");
  ni134_r_e_g_1 <= add(r_innerIndex(4 downto 0), "00001");

-- b9s1
  ni125_samples <= p_samples_imm2;
  ni318_nSample <= ni125_samples;
  ti137_samples <= r_innerIndex(4 downto 0);
  ni137_samples <= p_samples_imm;
  ni131_samples <= ni137_samples;

-- b9s2
  ni141_samples <= r_nSample;
  t_2 <= r_innerIndex(4 downto 0);

-- b10s0
  ni157_r_e_g_0 <= add(r_innerIndex(4 downto 0), "00001");

-- b10s1
  ti151_samples <= r_innerIndex(4 downto 0);
  ni151_samples <= p_samples_imm2;
  ni155_samples <= p_samples_imm;
  ni319_suif_tmp5 <= "0000000000000000000000000000000" & cmp_less_s(ni151_samples, ni155_samples);

-- b11s0
  ni165_r_e_g_0 <= add(r_innerIndex(4 downto 0), "00001");
  ni172_r_e_g_1 <= add(r_innerIndex(4 downto 0), "00001");

-- b11s1
  ni163_samples <= p_samples_imm2;
  ni320_nSample <= ni163_samples;
  ti175_samples <= r_innerIndex(4 downto 0);
  ni175_samples <= p_samples_imm;
  ni169_samples <= ni175_samples;

-- b11s2
  ni179_samples <= r_nSample;
  t_3 <= r_innerIndex(4 downto 0);

-- b12s0
  ni321_innerIndex <= add(r_innerIndex, X"00000001");
  ni316_suif_tmp3 <= "0000000000000000000000000000000" & cmp_less_s(ni321_innerIndex, X"0000001f");

-- b13s0
  ni322_index <= add(r_index, X"00000001");
  ni323_suif_tmp2 <= "0000000000000000000000000000000" & cmp_less_s(ni322_index, X"00000020");

-- b14s0
  ni324_counter <= add(r_counter, X"00000001");
  ni325_suif_tmp0 <= "0000000000000000000000000000000" & cmp_less_u(ni324_counter, X"000f4240");

-- b15s0
  ni326_index <= X"00000000";

-- b16s0

-- b16s1
  ti227_samples <= r_index(4 downto 0);
  ni227_samples <= p_samples_imm2;
  ni328_suif_tmp7 <= ni227_samples;
  ni329_index <= add(r_index, X"00000001");
  ni327_suif_tmp6 <= "0000000000000000000000000000000" & cmp_less_s(ni329_index, X"00000020");

-- b17s0

-- b18s0

-- 


  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b0s0 =>
        if (stateEn = '1') then
          r_nSample <= ni298_nSample;
        end if;
      when b3s1 =>
        if (stateEn = '1') then
          r_nSample <= ni306_nSample;
        end if;
      when b9s1 =>
        if (stateEn = '1') then
          r_nSample <= ni318_nSample;
        end if;
      when b11s1 =>
        if (stateEn = '1') then
          r_nSample <= ni320_nSample;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b0s0 =>
        if (stateEn = '1') then
          r_NUM_LOOPS <= ni299_NUM_LOOPS;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b0s0 =>
        if (stateEn = '1') then
          r_counter <= ni300_counter;
        end if;
      when b4s0 =>
        if (stateEn = '1') then
          r_counter <= ni309_counter;
        end if;
      when b14s0 =>
        if (stateEn = '1') then
          r_counter <= ni324_counter;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b0s0 =>
        if (stateEn = '1') then
          r_index <= ni301_index;
        end if;
      when b1s0 =>
        if (stateEn = '1') then
          r_index <= ni303_index;
        end if;
      when b2s0 =>
        if (stateEn = '1') then
          r_index <= ni304_index;
        end if;
      when b3s1 =>
        if (stateEn = '1') then
          r_index <= ni308_index;
        end if;
      when b5s0 =>
        if (stateEn = '1') then
          r_index <= ni312_index;
        end if;
      when b13s0 =>
        if (stateEn = '1') then
          r_index <= ni322_index;
        end if;
      when b15s0 =>
        if (stateEn = '1') then
          r_index <= ni326_index;
        end if;
      when b16s1 =>
        if (stateEn = '1') then
          r_index <= ni329_index;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b1s0 =>
        if (stateEn = '1') then
          r_suif_tmp8 <= ni302_suif_tmp8;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b3s0 =>
        if (stateEn = '1') then
          r_suif_tmp <= ni305_suif_tmp;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b3s1 =>
        if (stateEn = '1') then
          r_suif_tmp00 <= ni307_suif_tmp00;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b5s0 =>
        if (stateEn = '1') then
          r_suif_tmp1 <= ni313_suif_tmp1;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b6s0 =>
        if (stateEn = '1') then
          r_suif_tmp_0 <= ni314_suif_tmp_0;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b7s0 =>
        if (stateEn = '1') then
          r_innerIndex <= ni315_innerIndex;
        end if;
      when b12s0 =>
        if (stateEn = '1') then
          r_innerIndex <= ni321_innerIndex;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b8s0 =>
        if (stateEn = '1') then
          r_r_e_g_0 <= ni115_r_e_g_0;
        end if;
      when b9s0 =>
        if (stateEn = '1') then
          r_r_e_g_0 <= ni127_r_e_g_0;
        end if;
      when b10s0 =>
        if (stateEn = '1') then
          r_r_e_g_0 <= ni157_r_e_g_0;
        end if;
      when b11s0 =>
        if (stateEn = '1') then
          r_r_e_g_0 <= ni165_r_e_g_0;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b8s1 =>
        if (stateEn = '1') then
          r_suif_tmp4 <= ni317_suif_tmp4;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b9s0 =>
        if (stateEn = '1') then
          r_r_e_g_1 <= ni134_r_e_g_1;
        end if;
      when b11s0 =>
        if (stateEn = '1') then
          r_r_e_g_1 <= ni172_r_e_g_1;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b10s1 =>
        if (stateEn = '1') then
          r_suif_tmp5 <= ni319_suif_tmp5;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b12s0 =>
        if (stateEn = '1') then
          r_suif_tmp3 <= ni316_suif_tmp3;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b13s0 =>
        if (stateEn = '1') then
          r_suif_tmp2 <= ni323_suif_tmp2;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b14s0 =>
        if (stateEn = '1') then
          r_suif_tmp0 <= ni325_suif_tmp0;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b16s1 =>
        if (stateEn = '1') then
          r_suif_tmp7 <= ni328_suif_tmp7;
        end if;
      when others =>
      end case;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      case thisState is
      when b16s1 =>
        if (stateEn = '1') then
          r_suif_tmp6 <= ni327_suif_tmp6;
        end if;
      when others =>
      end case;
    end if;
  end process;

-- "input" interface signals
  process (clk)
  begin
    if (clk'event and clk='1') then
      if ((p_input_en and p_input_rdy) = '1') then
        r_input <= p_input_data;
      end if;
    end if;
  end process;

  p_input_en <= 
    s_b3s0_en and not p_input_eos when thisState = b3s0 else
    s_b4s0_en or not p_input_eos when thisState = b4s0 else
    '0';

-- "output" interface signals
  p_output_en <= 
    s_b16s1_en when thisState = b16s1 else
    s_b17s0_en when thisState = b17s0 else
    '0';
  p_output_data <= ni328_suif_tmp7;
  p_output_eos <= 
    '1' when thisState = b17s0 else
    '0';

-- "samples" memory signals
  ram_0: Sorter_samples_RAM
    port map (
      rst => reset, 
      clk => clk, 
      we => p_samples_we, 
      addr => p_samples_addr, 
      addr2 => p_samples_addr2, 
      din => p_samples_din, 
      dout => p_samples_dout, 
      dout2 => p_samples_dout2);

  p_samples_addr <= 
    r_index(4 downto 0) when thisState = b1s0 else
    r_suif_tmp00(4 downto 0) when thisState = b3s2 else
    r_innerIndex(4 downto 0) when thisState = b8s0 else
    r_innerIndex(4 downto 0) when thisState = b9s0 else
    r_r_e_g_1 when thisState = b9s1 else
    r_innerIndex(4 downto 0) when thisState = b9s2 else
    ni157_r_e_g_0 when thisState = b10s0 else
    r_innerIndex(4 downto 0) when thisState = b11s0 else
    r_r_e_g_1 when thisState = b11s1 else
    r_innerIndex(4 downto 0) when thisState = b11s2 else
    (others => 'X');
  p_samples_re <= 
    newState when thisState = b8s1 else
    newState when thisState = b9s1 else
    newState when thisState = b10s1 else
    newState when thisState = b11s1 else
    '0';
  p_samples_re2 <= 
    newState when thisState = b8s1 else
    newState when thisState = b9s1 else
    newState when thisState = b10s1 else
    newState when thisState = b11s1 else
    newState when thisState = b16s1 else
    '0';
  p_samples_addr2 <= 
    ni115_r_e_g_0 when thisState = b8s0 else
    ni127_r_e_g_0 when thisState = b9s0 else
    r_innerIndex(4 downto 0) when thisState = b10s0 else
    ni165_r_e_g_0 when thisState = b11s0 else
    r_index(4 downto 0) when thisState = b16s0 else
    (others => 'X');
  p_samples_we <= 
    '1' when thisState = b1s0 else
    '1' when thisState = b3s2 else
    '1' when thisState = b9s1 else
    '1' when thisState = b9s2 else
    '1' when thisState = b11s1 else
    '1' when thisState = b11s2 else
    '0';
  p_samples_din <= 
    ni13_samples when thisState = b1s0 else
    r_nSample when thisState = b3s2 else
    ni137_samples when thisState = b9s1 else
    r_nSample when thisState = b9s2 else
    ni175_samples when thisState = b11s1 else
    r_nSample when thisState = b11s2 else
    (others => 'X');
  process (clk)
  begin
    if (clk'event and clk='1') then
      if (p_samples_re = '1') then
        r_samples <= p_samples_dout;
      end if;
    end if;
  end process;

  process (clk)
  begin
    if (clk'event and clk='1') then
      if (p_samples_re2 = '1') then
        r2_samples <= p_samples_dout2;
      end if;
    end if;
  end process;

  p_samples_imm <= 
    p_samples_dout when newState = '1' else
    r_samples;
  p_samples_imm2 <= 
    p_samples_dout2 when newState = '1' else
    r2_samples;
end rtl;
